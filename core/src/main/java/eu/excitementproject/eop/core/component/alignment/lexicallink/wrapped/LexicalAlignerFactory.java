package eu.excitementproject.eop.core.component.alignment.lexicallink.wrapped;

import java.util.ArrayList;
import java.util.HashMap;

import eu.excitementproject.eop.common.component.lexicalknowledge.LexicalResource;
import eu.excitementproject.eop.common.component.lexicalknowledge.RuleInfo;
import eu.excitementproject.eop.common.representation.partofspeech.PartOfSpeech;
import eu.excitementproject.eop.core.component.alignment.lexicallink.LexicalAligner;
import eu.excitementproject.eop.core.component.alignment.lexicallink.LexicalResourceInformation;

/**
 * A static class for lexical resource developers (?). Give one lexical resource with parameters, 
 * the methods will return a lexical aligner that works with the given resource. 
 * 
 * NOTE: this code is deprecated. LexicalAlignerFromLexicalResource, instead of this code.  
 * @author Tae-Gil Noh
 *
 */
@Deprecated 
public class LexicalAlignerFactory {

	static LexicalAligner getLexicalAlignerFromLexicalResource(LexicalResource<? extends RuleInfo> aLexicalResource, int maxPhrase, String resourceVersion, Boolean useLemma, PartOfSpeech leftPos, PartOfSpeech rightPos)
	{		
		ArrayList<LexicalResource<? extends RuleInfo>> lexicalResourceArr = new ArrayList<LexicalResource<? extends RuleInfo>>(); 
		lexicalResourceArr.add(aLexicalResource); 
		HashMap<String, LexicalResourceInformation> optionMap = new HashMap<String, LexicalResourceInformation>();
		LexicalResourceInformation option = new LexicalResourceInformation(resourceVersion, useLemma, leftPos, rightPos); 
		optionMap.put(aLexicalResource.getClass().getName(), option); 
	
		LexicalAligner aligner = new LexicalAligner(lexicalResourceArr, maxPhrase, optionMap);  
		return aligner; 
	}

//		
//		/**
//		 * Initialize a lexical aligner using parameters. 
//		 * This is a convenience constructor, that helps easy initialization for lexical resource developers.
//		 *  
//		 * It gets one resource, and one information about this resource, and uses that to make a lexical aligner.  
//		 * 
//		 * @param lexicalResources An initialized instance of a lexical resource. 
//		 * @param maxPhrase The maximum length of phrase to align. If your lexical resource does not support "phrase (multi-word)", you can set this to 1. 
//		 * @param lexicalResourcesInformation Additional information required for the aligner to denote the 
//		 * 					information section of the links generated by this lexical resource. 
//		 */
//		public LexicalAligner(LexicalResource<? extends RuleInfo> aLexicalResource, int maxPhrase, String resourceVersion, Boolean useLemma, PartOfSpeech leftPos, PartOfSpeech rightPos) 
//		{	
//			this.lexicalResources = new ArrayList<LexicalResource<? extends RuleInfo>>(); 
//			this.lexicalResources.add(aLexicalResource); 
//			this.maxPhrase = maxPhrase; 		
//			HashMap<String, LexicalResourceInformation> map = new HashMap<String, LexicalResourceInformation>(); 
//			LexicalResourceInformation info = new LexicalResourceInformation(resourceVersion, useLemma, leftPos, rightPos);
//			map.put(aLexicalResource.getClass().getName(), info); 
//			this.lexicalResourcesInformation = map; 
//		}
//
//		// TODO Auto-generated constructor stub

}
